// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0

package sqlc

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type TypeEnum string

const (
	TypeEnumDeposit    TypeEnum = "deposit"
	TypeEnumWithdrawal TypeEnum = "withdrawal"
	TypeEnumRefund     TypeEnum = "refund"
	TypeEnumPurchase   TypeEnum = "purchase"
)

func (e *TypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeEnum(s)
	case string:
		*e = TypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeEnum: %T", src)
	}
	return nil
}

type NullTypeEnum struct {
	TypeEnum TypeEnum `json:"type_enum"`
	Valid    bool     `json:"valid"` // Valid is true if TypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.TypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TypeEnum), nil
}

type Ledger struct {
	ID          string    `json:"id"`
	UserID      string    `json:"user_id"`
	Type        TypeEnum  `json:"type"`
	Description string    `json:"description"`
	Current     int64     `json:"current"`
	Add         int64     `json:"add"`
	Final       int64     `json:"final"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type User struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	FullName  string    `json:"full_name"`
	Password  string    `json:"password"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}
