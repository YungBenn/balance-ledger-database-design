// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: ledger.sql

package sqlc

import (
	"context"
)

const createLedger = `-- name: CreateLedger :one
INSERT INTO ledger (
        id,
        user_id,
        TYPE,
        description,
        current,
        ADD,
        final
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, type, description, current, add, final, created_at, updated_at
`

type CreateLedgerParams struct {
	ID          string   `json:"id"`
	UserID      string   `json:"user_id"`
	Type        TypeEnum `json:"type"`
	Description string   `json:"description"`
	Current     int64    `json:"current"`
	Add         int64    `json:"add"`
	Final       int64    `json:"final"`
}

func (q *Queries) CreateLedger(ctx context.Context, arg CreateLedgerParams) (Ledger, error) {
	row := q.db.QueryRow(ctx, createLedger,
		arg.ID,
		arg.UserID,
		arg.Type,
		arg.Description,
		arg.Current,
		arg.Add,
		arg.Final,
	)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Description,
		&i.Current,
		&i.Add,
		&i.Final,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLedger = `-- name: DeleteLedger :exec
DELETE FROM ledger
WHERE id = $1
`

func (q *Queries) DeleteLedger(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteLedger, id)
	return err
}

const getBalanceByUser = `-- name: GetBalanceByUser :one
SELECT final
FROM ledger
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetBalanceByUser(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRow(ctx, getBalanceByUser, userID)
	var final int64
	err := row.Scan(&final)
	return final, err
}

const getLedgerByID = `-- name: GetLedgerByID :one
SELECT id, user_id, type, description, current, add, final, created_at, updated_at
FROM ledger
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetLedgerByID(ctx context.Context, id string) (Ledger, error) {
	row := q.db.QueryRow(ctx, getLedgerByID, id)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Description,
		&i.Current,
		&i.Add,
		&i.Final,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLedgerByUser = `-- name: ListLedgerByUser :many
SELECT id, user_id, type, description, current, add, final, created_at, updated_at
FROM ledger
WHERE user_id = $1
LIMIT $3 OFFSET (($2 - 1) * $3)
`

type ListLedgerByUserParams struct {
	UserID  string      `json:"user_id"`
	Column2 interface{} `json:"column_2"`
	Limit   int32       `json:"limit"`
}

func (q *Queries) ListLedgerByUser(ctx context.Context, arg ListLedgerByUserParams) ([]Ledger, error) {
	rows, err := q.db.Query(ctx, listLedgerByUser, arg.UserID, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ledger{}
	for rows.Next() {
		var i Ledger
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Description,
			&i.Current,
			&i.Add,
			&i.Final,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLedger = `-- name: UpdateLedger :one
UPDATE ledger
SET user_id = $2,
    TYPE = $3,
    description = $4,
    current = $5,
    ADD = $6,
    final = $7,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, type, description, current, add, final, created_at, updated_at
`

type UpdateLedgerParams struct {
	ID          string   `json:"id"`
	UserID      string   `json:"user_id"`
	Type        TypeEnum `json:"type"`
	Description string   `json:"description"`
	Current     int64    `json:"current"`
	Add         int64    `json:"add"`
	Final       int64    `json:"final"`
}

func (q *Queries) UpdateLedger(ctx context.Context, arg UpdateLedgerParams) (Ledger, error) {
	row := q.db.QueryRow(ctx, updateLedger,
		arg.ID,
		arg.UserID,
		arg.Type,
		arg.Description,
		arg.Current,
		arg.Add,
		arg.Final,
	)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Description,
		&i.Current,
		&i.Add,
		&i.Final,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
